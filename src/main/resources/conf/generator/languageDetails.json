{
    "languages" : {
        "csharp" : {
            "name" : "dotnet",
            "importSyntax":"using",
            "packageSyntax":"namespace",
            "openBracket":"{",
            "closeBracket":"}",
            "classSyntax":"public class",
            "fieldSyntax":"public Type field { get; set; }",
            "endOfInstruction":";",
            "annotationSyntax":"[?]",
            "constructorSyntax": "public ?(){}",
            "methodSyntax": "public #type# #name#(#arg#){\n #body#\n}",
            "encapsulation":"",
            "extension":"cs",
            "nullable": "?",
            "frameworks" : {
                "dotnet" : {
                    "template" : "Template.code",
                    "repository": "Template.code",
                    "listSyntax" : "IEnumerable<?>",
                    "isOneRepository":"true",
                    "imports": {
                        "controller":[
                            "System.Diagnostics",
                            "Microsoft.AspNetCore.Mvc",
                            "packageName.RepositoryDbContext",
                            "entity.?"
                        ],
                        "entity":[
                            "System.ComponentModel.DataAnnotations",
                            "System.ComponentModel.DataAnnotations.Schema"
                        ],
                        "repository":[
                            "packageName",
                            "Microsoft.EntityFrameworkCore"
                        ]
                    },
                    "annotationProperty" : {
                        "table":"Table(\"?\")",
                        "autoIncrement":"",
                        "column":"Column(\"?\")",
                        "entity": "",
                        "controller": "Controller",
                        "constraints":{
                            "primaryKey":"Key",
                            "foreignKey":{
                                "annotation":"ForeignKey(\"?\")",
                                "manyToOne":"",
                                "manyToMany":"",
                                "oneToMany":"",
                                "oneToOne":""
                            }
                        }
                    },
                    "crudMethod" : {
                        "findAll": {
                            "content": "return View(await _context.?.ToListAsync());",
                            "function": "Index",
                            "parameter": "",
                            "view": ""
                        },
                        "findById": {
                            "content": "if (id == null)\n{\n\treturn NotFound();\n}\nvar #object# = await _context.?.FirstOrDefaultAsync(m => m.#primaryKeyField# == id);\nif (#object# == null)\n{\n\treturn NotFound();\n}\nreturn View(#object#);",
                            "function": "Details",
                            "parameter": "#typePrimaryKey##nullable# id",
                            "view": ""
                        },
                        "delete": {
                            "content": "if (id == null)\n{\n\treturn NotFound();\n}\nvar #object# = await _context.?.FirstOrDefaultAsync(m => m.#primaryKeyField# == id);\nif (#object# == null)\n{\n\treturn NotFound();\n}\n_context.?.Remove(#object#);\nawait _context.SaveChangesAsync();\nreturn RedirectToAction(nameof(Index));",
                            "function": "Delete",
                            "parameter": "#typePrimaryKey##nullable# id",
                            "view": ""
                        },
                        "update": {
                            "content": "if (id == null)\n{\n\treturn NotFound();\n}\n_context.?.Update(#object#);\nawait _context.SaveChangesAsync();\nreturn RedirectToAction(nameof(Index));",
                            "function": "Edit",
                            "parameter": "#typePrimaryKey##nullable# id, [Bind(#fields#)] ? #object#",
                            "view": "\n\tpublic IActionResult Edit()\n\t{\n\t\tif (id == null)\n\t\t{\n\t\t\treturn NotFound();\n\t\t}\n\t\tvar #object# = await _context.?.FirstOrDefaultAsync(m => m.#primaryKeyField# == id);\n\t\tif (#object# == null)\n\t\t{\n\t\t\treturn NotFound();\n\t\t}\n\t\t#foreignKey#\n\t\treturn View(#object#);\n\t}"
                        },
                        "save": {
                            "content": "_context.?.Add(#object#);\nawait _context.SaveChangesAsync();\nreturn RedirectToAction(nameof(Index));",
                            "function": "Create",
                            "parameter": "[Bind(#fields#)] ? #object#",
                            "view": "\n\tpublic IActionResult Create()\n\t{\n\t\t#foreignKey#\n\t\treturn View();\n\t}"
                        }
                    },
                    "controllerProperty" : {
                        "path": "Route(\"?\")",
                        "foreignKey": "ViewData[\"foreignKeyField\"] = new SelectList(_context.foreignObject, \"foreignPrimaryKeyField\", \"foreignPrimaryKeyField\");",
                        "get": "HttpGet",
                        "post": "HttpPost",
                        "put": "HttpPost",
                        "delete": "HttpGet",
                        "name":"Controller",
                        "pathSyntax":"[?]",
                        "classSyntax": "?Controller : Controller",
                        "returnType": "async Task<IActionResult>",
                        "returnTypeDelete": "async Task<IActionResult>",
                        "field": "private readonly RepositoryDbContext _context;\n\tprivate readonly ILogger<?Controller> _logger;",
                        "annotationField": "",
                        "annotationMethodParameter":"",
                        "annotationArgumentParameterFormData":"",
                        "annotationArgumentParameterLink":"",
                        "constructor": "\tpublic #name#Controller(RepositoryDbContext context) { _context = context; }"
                    },
                    "repositoryProperty" : {
                        "name":"DbContext",
                        "classSyntax": "public class ?DbContext : DbContext",
                        "fieldSyntax": "\tpublic DbSet<#Field#> #Field# { get; set; }",
                        "constructor":""
                    }
                }
            }
        }
    }
}
